offset              size                description
0                   8                   jmp instruction should be padded with nulls or nops up to 8 bytes
8                   16                  Label. For display purposes only. Only filename characters are allowed. Should be padded up to 16 bytes
24                  8                   Number of sectors on the disk.
32                  1                   Bytes per sector (2 to the power of (this number + 8) gives bytes per sector)*
33                  1                   Sectors per cluster (2 to the power of this number gives number of sectors per cluster)**
34                  2                   Version of this file system. Major version in upper byte and minor version in lower byte. For this specification it's 0x0100 i.e. version 1.0
36                  2                   Signature. This is a signature for the tool or program that created this filesystem. For ASOS installer, this is 0xA51
38                  2                   Cluster offset of last cluster relative to the start of the filesytem ***
40                  4                   Low 32 bits of LBA of first sector of this partition / filesystem
44                  4                   High 32 bits of LBA of first sector of this partition / filesystem
48                  4                   Low 32 bits of LBA of last sector of this partition / filesystem
52                  4                   High 32 bits of LBA of last sector of this partition / filesystem
56                  8                   Free for use. Tools, OS, and other programs can use this value as they see fit
64                  8                   Reserved for future use.
72                  4                   Flags. Can be set to 0 for this version (1.0) of the filesystem
76                  4                   XOR checksum

Total is 80 bytes

* For example if bytes per sector = 1, then the actual bytes by sector is 2 ^ (1 + 8) = 2 ^ 9 = 512
** For example if sectors per cluster = 3, then number of sectors per cluster = 2 ^ 3 = 8
*** This is calculated as total number of clusters in the partition - 1

The filename characters are A-Z a-z 0-9 . -
The space character is used for padding.

Total number of possible entries		= 65536
Bytes per entry					        = 32
Total number of bytes for all entries	= 32 * 65536	= 2097152
Number of sectors reserved for entries	= 2097152 / 512	= 4096
Number of clusters reserved for entries	= 4096 / 8		= 512
Number of bytes for miscellaneous use	= 512 * 32		= 16384


Explanation:

Total number of possible entries: 65536
This is the total number of clusters that can make up the entire file system

Bytes per entry: 32
Each file entry is 32 bytes long. This includes file name and other attributes

Total number of bytes for entries: 32 * 65536 = 2097152
This is the total number of bytes that is required for all entries

Number of sectors reserved for all entries: 2097152 / 512 = 4096
This is the total number of sectors that should be reserved for the entries. This assumes 512 bytes per sector

Number of clusters reserved for all entries: 4096 / 8 = 512
This is the number of clusters that should be reserved for the entries. This assumes 512 bytes per sector and
8 sectors per cluster

Number of bytes for miscellaneous use: 512 * 32 = 16384
This is the total number of bytes available for miscellaneous use. It is actually the file entries that would have
been used for the reserved clusters. In our case we use these for bootstrap code and other things.

This means the first file entry will be located in sector 128 (65536 / 512), and the file itself will be located in
cluster number 512 (cluster numbering starts from 0) or 2097152 bytes in.

It also means when searching for a file entry, start searching at 16. (65536/4096 where 4096 is the number of bytes
per cluster) E.g.

.loop:
    mov cx, 16
    #(scan filename)
    #(if file found jmp to load_file)
    #(else if cx = 0xFFFF then scan is done)
    #(Check whether to load next cluster for file entries)
    inc cx
    jmp .loop

load_file:
    shl cx, 3               ; multipy by 8 (number of sectors per cluster) to get lba offset.
    add cx, lba_start       ; lba_start is the lba of first sector of partition or filesystem
    #(load 8 sectors)

Number of file entries a cluster can hold = 4096 / 32 = 128. This means next cluster of file entries
should be loaded after every 128 scans

File Entries
============
Each file entry is 32 bytes long. And are as follows

field               size                            description
Filename            28                              Filenames should be padded with spaces up to 30 bytes
File size           2                               This is the actual number of bytes in the file
Reserved            2                               Reserved*

* This field is actually used by the filesystem's caching mechanism

When the first byte in the filename is null or 0x00, it means that file has been deleted and the cluster
it occupied is available for reallocation.