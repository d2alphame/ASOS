First Cluster
=============
offset              size                description
0                   8                   jmp instruction should be padded with nulls or nops up to 8 bytes
8                   8                   Total number of sectors on the drive
16                  1                   Bytes per sector (2 to the power of (this number + 8) gives bytes per sector)* 
17                  1                   Sectors per cluster (2 to the power of this number gives number of sectors per cluster)**
18                  2                   Cluster offset of last cluster relative to the start of the filesytem ***
20                  4                   Reserved for future use
24                  4                   Low 32 bits of LBA of first sector of this partition / filesystem
28                  4                   High 32 bits of LBA of first sector of this partition / filesystem
32                  4                   Low 32 bits of LBA of last sector of this partition / filesystem
36                  4                   High 32 bits of LBA of last sector of this partition / filesystem


* For example if bytes per sector = 1, then the actual bytes by sector is 2 ^ (1 + 8) = 2 ^ 9 = 512
** For example if sectors per cluster = 3, then number of sectors per cluster = 2 ^ 3 = 8
*** This is calculated as total number of clusters in the partition - 1

offset 32 - 445 Contains the bootstrap code, if any.
446 - 509       Space for MBR style partition tables if any
510 - 511       Boot signature given by the word value 0xAA55


Total number of possible entries		= 65536
Bytes per entry					        = 32
Total number of bytes for all entries	= 32 * 65536	= 2097152
Number of sectors reserved for entries	= 2097152 / 512	= 4096
Number of clusters reserved for entries	= 4096 / 8		= 512
Number of bytes for miscellaneous use	= 512 * 32		= 65536

Explanation:

Total number of possible entries: 65536
This is the total number of clusters that can make up the entire file system

Bytes per entry: 32
Each file entry is 32 bytes long. This includes file name and other attributes

Total number of bytes for entries: 32 * 65536 = 2097152
This is the total number of bytes that is required for all entries

Number of sectors reserved for all entries: 2097152 / 512 = 4096
This is the total number of sectors that should be reserved for the entries. This assumes 512 bytes per sector

Number of clusters reserved for all entries: 4096 / 8 = 512
This is the number of clusters that should be reserved for the entries. This assumes 512 bytes per sector and
8 sectors per cluster

Number of bytes for miscellaneous use: 512 * 32 = 65536
This is the total number of bytes available for miscellaneous use. It is actually the file entries that would have
been used for the reserved clusters. In our case we use these for bootstrap code and other things.

This means the first file entry will be located in sector 128 (65536 / 512), and the file itself will be located in
cluster number 512 (cluster numbering starts from 0) or 2097152 bytes in.

It also means when searching for a file entry, start searching at 16. (65536/4096 where 4096 is the number of bytes
per cluster) E.g.

.loop:
    mov cx, 16
    #(scan filename)
    #(if file found jmp to load_file)
    #(else if cx = 0xFFFF then scan is done)
    #(Check whether to load next cluster for file entries)
    inc cx
    jmp .loop

load_file:
    shl cx, 3               ; multipy by 8 (number of sectors per cluster) to get lba offset.
    add cx, lba_start       ; lba_start is the lba of first sector of partition or filesystem
    #(load 8 sectors)

Number of file entries a cluster can hold = 4096 / 32 = 128. This means next cluster of file entries
should be loaded after every 128 scans
